{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { CommandLine } from 'src/app/models/cammand_line';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/cammand-line.service\";\nimport * as i3 from \"src/app/services/product.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction AddCammandLineComponent_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const product_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", product_r2.idProduct);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(product_r2.name);\n  }\n}\nfunction AddCammandLineComponent_option_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const cart_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", cart_r3.idCart);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(cart_r3.totalCart);\n  }\n}\nexport class AddCammandLineComponent {\n  constructor(formBuilder, commandLineService, productService, router) {\n    this.formBuilder = formBuilder;\n    this.commandLineService = commandLineService;\n    this.productService = productService;\n    this.router = router;\n    this.commandLine = new CommandLine(); // initialize with parentheses\n    this.productList = [];\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.productService.getProducts().subscribe(response => {\n      this.productList = response;\n    }, error => {\n      console.log('Error fetching products: ' + error.message);\n    });\n    this.addCommandLineForm = this.formBuilder.group({\n      quantity: ['', [Validators.required, Validators.pattern('^[0-9]*$')]],\n      idProduct: ['', Validators.required]\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.addCommandLineForm.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    const commandLine = {\n      quantity: this.addCommandLineForm.value.quantity,\n      product: {\n        idProduct: this.addCommandLineForm.value.idProduct\n      }\n    };\n    this.commandLineService.addCommandLine(this.addCommandLineForm.value, this.idCart).subscribe(() => {\n      this.router.navigate(['/list-command-line']); // corrected component name\n    }, error => {\n      console.log('Error adding command line: ' + error.message);\n    });\n  }\n  onCancel() {\n    this.router.navigate(['/list-command-line']); // corrected component name\n  }\n}\n\nAddCammandLineComponent.ɵfac = function AddCammandLineComponent_Factory(t) {\n  return new (t || AddCammandLineComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CommandeLineService), i0.ɵɵdirectiveInject(i3.ProduitService), i0.ɵɵdirectiveInject(i4.Router));\n};\nAddCammandLineComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddCammandLineComponent,\n  selectors: [[\"app-add-cammand-line\"]],\n  decls: 27,\n  vars: 6,\n  consts: [[1, \"container\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"idProduct\"], [\"formControlName\", \"idProduct\", \"required\", \"\", \"name\", \"produit.idProduct\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"product\"], [\"formControlName\", \"cart\", \"name\", \"cart\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"quantity\"], [\"type\", \"number\", \"formControlName\", \"quantity\", \"name\", \"quantity\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [3, \"value\"]],\n  template: function AddCammandLineComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h4\");\n      i0.ɵɵtext(4, \"Add Command Line\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"form\", 4);\n      i0.ɵɵlistener(\"ngSubmit\", function AddCammandLineComponent_Template_form_ngSubmit_6_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 6);\n      i0.ɵɵtext(9, \"Product\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"select\", 7);\n      i0.ɵɵlistener(\"ngModelChange\", function AddCammandLineComponent_Template_select_ngModelChange_10_listener($event) {\n        return ctx.commandLine.produit = $event;\n      });\n      i0.ɵɵelementStart(11, \"option\", 8);\n      i0.ɵɵtext(12, \"Select a product...\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(13, AddCammandLineComponent_option_13_Template, 2, 2, \"option\", 9);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\", 5)(15, \"label\", 10);\n      i0.ɵɵtext(16, \"Cart\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"select\", 11);\n      i0.ɵɵlistener(\"ngModelChange\", function AddCammandLineComponent_Template_select_ngModelChange_17_listener($event) {\n        return ctx.idCart = $event;\n      });\n      i0.ɵɵelementStart(18, \"option\", 8);\n      i0.ɵɵtext(19, \"--Select--\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(20, AddCammandLineComponent_option_20_Template, 2, 2, \"option\", 9);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"div\", 5)(22, \"label\", 12);\n      i0.ɵɵtext(23, \"Quantity\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"input\", 13);\n      i0.ɵɵlistener(\"ngModelChange\", function AddCammandLineComponent_Template_input_ngModelChange_24_listener($event) {\n        return ctx.commandLine.quantity = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(25, \"button\", 14);\n      i0.ɵɵtext(26, \"Add\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formGroup\", ctx.addCommandLineForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.commandLine.produit);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.productList);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.idCart);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.cartList);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.commandLine.quantity);\n    }\n  },\n  dependencies: [i5.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","CommandLine","i0","AddCammandLineComponent","constructor","formBuilder","commandLineService","productService","router","ngOnInit","getProducts","subscribe","response","productList","error","console","log","message","addCommandLineForm","group","quantity","required","pattern","idProduct","f","controls","onSubmit","submitted","commandLine","value","product","addCommandLine","idCart","navigate","onCancel","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\ibtih\\Downloads\\By-sellBack-backoffice1\\By-sellBack-backoffice1\\src\\app\\component\\Cammand_line\\add-cammand-line\\add-cammand-line.component.ts","C:\\Users\\ibtih\\Downloads\\By-sellBack-backoffice1\\By-sellBack-backoffice1\\src\\app\\component\\Cammand_line\\add-cammand-line\\add-cammand-line.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { CommandLine } from 'src/app/models/cammand_line';\nimport { Produit } from 'src/app/models/produit';\nimport { CommandeLineService } from 'src/app/services/cammand-line.service';\nimport { ProduitService } from 'src/app/services/product.service';\n\n\n@Component({\n  selector: 'app-add-cammand-line',\n  templateUrl: './add-cammand-line.component.html',\n  styleUrls: ['./add-cammand-line.component.scss']\n})\nexport class AddCammandLineComponent  implements OnInit {\n  commandLine: CommandLine = new CommandLine(); // initialize with parentheses\n  addCommandLineForm!: FormGroup;\n  productList: Produit[] = [];\n  submitted = false;\n  idCart: number;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private commandLineService: CommandeLineService,\n    private productService: ProduitService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.productService.getProducts().subscribe(\n      (response: Produit[]) => {\n        this.productList = response;\n      },\n      (error: Error) => {\n        console.log('Error fetching products: ' + error.message);\n      }\n    );\n\n    this.addCommandLineForm = this.formBuilder.group({\n      quantity: ['', [Validators.required, Validators.pattern('^[0-9]*$')]],\n      idProduct: ['', Validators.required]\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.addCommandLineForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    const commandLine = {\n      quantity: this.addCommandLineForm.value.quantity,\n      product: {\n        idProduct: this.addCommandLineForm.value.idProduct\n      }\n    };\n\n    this.commandLineService.addCommandLine(this.addCommandLineForm.value, this.idCart).subscribe(\n      () => {\n        this.router.navigate(['/list-command-line']); // corrected component name\n      },\n      (error: Error) => {\n        console.log('Error adding command line: ' + error.message);\n      }\n    );\n  }\n\n  onCancel() {\n    this.router.navigate(['/list-command-line']); // corrected component name\n  }\n}","<div class=\"container\">\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <h4>Add Command Line</h4>\n    </div>\n    <div class=\"card-body\">\n      <form [formGroup]=\"addCommandLineForm\" (ngSubmit)=\"onSubmit()\">\n     \n     \n        <div class=\"form-group\">\n          <label for=\"idProduct\">Product</label>\n          <select formControlName=\"idProduct\"  class=\"form-control\" required [(ngModel)]=\"commandLine.produit\" name=\"produit.idProduct\" >\n            <option value=\"\">Select a product...</option>\n            <option *ngFor=\"let product of productList\" [value]=\"product.idProduct\">{{ product.name }}</option>\n          </select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"product\">Cart</label>\n          <select class=\"form-control\"  formControlName=\"cart\" [(ngModel)]=\"idCart\" name=\"cart\" >\n            <option value=\"\">--Select--</option>\n            <option *ngFor=\"let cart of cartList\" [value]=\"cart.idCart\">{{cart.totalCart}}</option>\n          </select>\n        </div>\n          <!-- <div class=\"alert alert-danger\" *ngIf=\"addCommandLineForm.get('product').invalid && (addCommandLineForm.get('product').dirty || addCommandLineForm.get('product').touched)\">\n            <div *ngIf=\"product.errors?.['required']\">\n              Product is required.\n            </div>\n          </div>\n        </div> -->\n        <div class=\"form-group\">\n          <label for=\"quantity\">Quantity</label>\n          <input type=\"number\" class=\"form-control\" formControlName=\"quantity\"  [(ngModel)]=\"commandLine.quantity\" name=\"quantity\">\n          <!-- <div class=\"alert alert-danger\" *ngIf=\"addCommandLineForm.get('quantity').invalid && (addCommandLineForm.get('quantity').dirty || addCommandLineForm.get('quantity').touched)\">\n            <div *ngIf=\"quantity.errors?.['required']\">\n              Quantity is required.\n            </div>\n            <div *ngIf=\"quantity.errors?.['pattern']\">\n              Quantity must be a number.\n            </div>\n          </div> -->\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\" >Add</button>\n    \n  \n  </form>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}