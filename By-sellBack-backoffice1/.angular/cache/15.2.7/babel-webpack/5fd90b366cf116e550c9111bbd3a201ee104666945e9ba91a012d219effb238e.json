{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrderService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:9000/bns/OrderController';\n  }\n  addPurchaseOrder(order, idCart) {\n    return this.http.post(`${this.baseUrl}/addOrder/${idCart}`, order);\n  }\n  updatePurchaseOrder(order) {\n    return this.http.put(`${this.baseUrl}/updateOrder`, order);\n  }\n  listPurchaseOrder() {\n    return this.http.get(`${this.baseUrl}/GetListOrders`);\n  }\n  listOrderById(id) {\n    return this.http.get(`${this.baseUrl}/GetListOrderById/${id}`);\n  }\n  totalOrdersTVA(idOrder) {\n    return this.http.put(`${this.baseUrl}/TotalOrdersTVA/${idOrder}`, {});\n  }\n  createCharge(token, idUser, idOrder) {\n    return this.http.post(`${this.baseUrl}/stripePayment/${token}/${idUser}/${idOrder}`, {});\n  }\n  generatePdfReport() {\n    return this.http.get(`${this.baseUrl}/orders/pdf`, {\n      responseType: 'blob'\n    });\n  }\n}\nOrderService.ɵfac = function OrderService_Factory(t) {\n  return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n};\nOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderService,\n  factory: OrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,2CAA2C;EAErB;EAExCC,gBAAgB,CAACC,KAAoB,EAAEC,MAAc;IACnD,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAgB,GAAG,IAAI,CAACC,OAAO,aAAaF,MAAM,EAAE,EAAED,KAAK,CAAC;EACnF;EAEAI,mBAAmB,CAACJ,KAAoB;IACtC,OAAO,IAAI,CAACF,IAAI,CAACO,GAAG,CAAgB,GAAG,IAAI,CAACF,OAAO,cAAc,EAAEH,KAAK,CAAC;EAC3E;EAEAM,iBAAiB;IACf,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAkB,GAAG,IAAI,CAACJ,OAAO,gBAAgB,CAAC;EACxE;EAEAK,aAAa,CAACC,EAAU;IACtB,OAAO,IAAI,CAACX,IAAI,CAACS,GAAG,CAAgB,GAAG,IAAI,CAACJ,OAAO,qBAAqBM,EAAE,EAAE,CAAC;EAC/E;EAEAC,cAAc,CAACC,OAAe;IAC5B,OAAO,IAAI,CAACb,IAAI,CAACO,GAAG,CAAS,GAAG,IAAI,CAACF,OAAO,mBAAmBQ,OAAO,EAAE,EAAE,EAAE,CAAC;EAC/E;EAEAC,YAAY,CAACC,KAAa,EAAEC,MAAc,EAAEH,OAAe;IACzD,OAAO,IAAI,CAACb,IAAI,CAACI,IAAI,CAAS,GAAG,IAAI,CAACC,OAAO,kBAAkBU,KAAK,IAAIC,MAAM,IAAIH,OAAO,EAAE,EAAE,EAAE,CAAC;EAClG;EAEAI,iBAAiB;IACf,OAAO,IAAI,CAACjB,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACJ,OAAO,aAAa,EAAE;MAAEa,YAAY,EAAE;IAAM,CAAE,CAAC;EAC9E;;AA/BWpB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAqB,SAAZrB,YAAY;EAAAsB,YAFX;AAAM","names":["OrderService","constructor","http","addPurchaseOrder","order","idCart","post","baseUrl","updatePurchaseOrder","put","listPurchaseOrder","get","listOrderById","id","totalOrdersTVA","idOrder","createCharge","token","idUser","generatePdfReport","responseType","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hadir\\Downloads\\By-sellBack-backoffice1 (1)\\By-sellBack-backoffice1\\src\\app\\services\\ordre.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { PurchaseOrder } from '../models/pruchase_order';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  private baseUrl = 'http://localhost:9000/bns/OrderController';\n\n  constructor(private http: HttpClient) { }\n\n  addPurchaseOrder(order: PurchaseOrder, idCart: number): Observable<PurchaseOrder> {\n    return this.http.post<PurchaseOrder>(`${this.baseUrl}/addOrder/${idCart}`, order);\n  }\n\n  updatePurchaseOrder(order: PurchaseOrder): Observable<PurchaseOrder> {\n    return this.http.put<PurchaseOrder>(`${this.baseUrl}/updateOrder`, order);\n  }\n\n  listPurchaseOrder(): Observable<PurchaseOrder[]> {\n    return this.http.get<PurchaseOrder[]>(`${this.baseUrl}/GetListOrders`);\n  }\n\n  listOrderById(id: number): Observable<PurchaseOrder> {\n    return this.http.get<PurchaseOrder>(`${this.baseUrl}/GetListOrderById/${id}`);\n  }\n\n  totalOrdersTVA(idOrder: number): Observable<number> {\n    return this.http.put<number>(`${this.baseUrl}/TotalOrdersTVA/${idOrder}`, {});\n  }\n\n  createCharge(token: string, idUser: number, idOrder: number): Observable<number> {\n    return this.http.post<number>(`${this.baseUrl}/stripePayment/${token}/${idUser}/${idOrder}`, {});\n  }\n\n  generatePdfReport(): Observable<any> {\n    return this.http.get(`${this.baseUrl}/orders/pdf`, { responseType: 'blob' });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}