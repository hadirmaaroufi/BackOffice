{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProduitService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:9000/bns/Product';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'multipart/form-data'\n      })\n    };\n  }\n  getProducts(currency) {\n    const url = `http://localhost:9000/bns/Product/retrieve-all-Products`;\n    const params = {};\n    if (currency) {\n      params.currency = currency;\n    }\n    return this.http.get(url, {\n      params\n    });\n  }\n  retrieveProduct(productId) {\n    const url = `${this.apiUrl}/retrieve-Product/${productId}`;\n    return this.http.get(url);\n  }\n  addProduct(product) {\n    console.log(\"aaaa\");\n    const url = `${this.apiUrl}/add-product`;\n    return this.http.post(url, product, this.httpOptions);\n  }\n  removeProduct(productId) {\n    const url = `${this.apiUrl}/remove-Product/${productId}`;\n    return this.http.delete(url);\n  }\n  updateProduct(product) {\n    const url = `${this.apiUrl}/update-Product`;\n    return this.http.put(url, product);\n  }\n  // convertCurrencies(conversionCurrency: ConversionCurrency): Observable<number> {\n  //   const url = `${this.apiUrl}/currency-converter`;\n  //   return this.http.post<number>(url, conversionCurrency);\n  // }\n  // getAllCurrencies(): Observable<Currency[]> {\n  //   const url = `${this.apiUrl}/currencies`;\n  //   return this.http.get<Currency[]>(url);\n  // }\n  promoteProduct(id, pourcentage) {\n    const url = `${this.apiUrl}/promotion/${id}/${pourcentage}`;\n    return this.http.put(url, null);\n  }\n  getClientLocation() {\n    const url = `${this.apiUrl}/client-location`;\n    return this.http.get(url);\n  }\n}\nProduitService.ɵfac = function ProduitService_Factory(t) {\n  return new (t || ProduitService)(i0.ɵɵinject(i1.HttpClient));\n};\nProduitService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProduitService,\n  factory: ProduitService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAChB,WAAM,GAAG,mCAAmC;IACpD,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIJ,WAAW,CAAC;QACzB,cAAc,EAAE;OACf;KACA;EANqC;EAOxCK,WAAW,CAACC,QAAiB;IAC3B,MAAMC,GAAG,GAAG,yDAAyD;IACrE,MAAMC,MAAM,GAAQ,EAAE;IACtB,IAAIF,QAAQ,EAAE;MACZE,MAAM,CAACF,QAAQ,GAAGA,QAAQ;;IAE5B,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAYF,GAAG,EAAE;MAAEC;IAAM,CAAE,CAAC;EAClD;EAEAE,eAAe,CAACC,SAAiB;IAC/B,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACK,MAAM,qBAAqBD,SAAS,EAAE;IAC1D,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAUF,GAAG,CAAC;EACpC;EAEAM,UAAU,CAACC,OAAgB;IACzBC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,MAAMT,GAAG,GAAG,GAAG,IAAI,CAACK,MAAM,cAAc;IAExC,OAAO,IAAI,CAACT,IAAI,CAACc,IAAI,CAAUV,GAAG,EAAEO,OAAO,EAAG,IAAI,CAACI,WAAW,CAAC;EACjE;EAEAC,aAAa,CAACR,SAAiB;IAC7B,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACK,MAAM,mBAAmBD,SAAS,EAAE;IACxD,OAAO,IAAI,CAACR,IAAI,CAACiB,MAAM,CAAOb,GAAG,CAAC;EACpC;EAEAc,aAAa,CAACP,OAAgB;IAC5B,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACK,MAAM,iBAAiB;IAC3C,OAAO,IAAI,CAACT,IAAI,CAACmB,GAAG,CAAUf,GAAG,EAAEO,OAAO,CAAC;EAC7C;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEAS,cAAc,CAACC,EAAU,EAAEC,WAAmB;IAC5C,MAAMlB,GAAG,GAAG,GAAG,IAAI,CAACK,MAAM,cAAcY,EAAE,IAAIC,WAAW,EAAE;IAC3D,OAAO,IAAI,CAACtB,IAAI,CAACmB,GAAG,CAAOf,GAAG,EAAE,IAAI,CAAC;EACvC;EAEAmB,iBAAiB;IACf,MAAMnB,GAAG,GAAG,GAAG,IAAI,CAACK,MAAM,kBAAkB;IAC5C,OAAO,IAAI,CAACT,IAAI,CAACM,GAAG,CAAkCF,GAAG,CAAC;EAC5D;;AA1DWN,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA0B,SAAd1B,cAAc;EAAA2B,YAFb;AAAM","names":["HttpHeaders","ProduitService","constructor","http","headers","getProducts","currency","url","params","get","retrieveProduct","productId","apiUrl","addProduct","product","console","log","post","httpOptions","removeProduct","delete","updateProduct","put","promoteProduct","id","pourcentage","getClientLocation","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hadir\\Downloads\\By-sellBack-backoffice1 (1)\\By-sellBack-backoffice1\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Produit } from '../models/produit';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProduitService {\n\n  constructor(private http: HttpClient) { }\n  private apiUrl = 'http://localhost:9000/bns/Product';\n  httpOptions = {\n    headers: new HttpHeaders({\n    'Content-Type': 'multipart/form-data'\n    })\n    }\n  getProducts(currency?: string): Observable<Produit[]> {\n    const url = `http://localhost:9000/bns/Product/retrieve-all-Products`;\n    const params: any = {};\n    if (currency) {\n      params.currency = currency;\n    }\n    return this.http.get<Produit[]>(url, { params });\n  }\n  \n  retrieveProduct(productId: number): Observable<Produit> {\n    const url = `${this.apiUrl}/retrieve-Product/${productId}`;\n    return this.http.get<Produit>(url);\n  }\n  \n  addProduct(product: Produit): Observable<Produit> {\n    console.log(\"aaaa\")\n    const url = `${this.apiUrl}/add-product`;\n\n    return this.http.post<Produit>(url, product , this.httpOptions);\n  }\n  \n  removeProduct(productId: number): Observable<void> {\n    const url = `${this.apiUrl}/remove-Product/${productId}`;\n    return this.http.delete<void>(url);\n  }\n  \n  updateProduct(product: Produit): Observable<boolean> {\n    const url = `${this.apiUrl}/update-Product`;\n    return this.http.put<boolean>(url, product);\n  }\n  \n  // convertCurrencies(conversionCurrency: ConversionCurrency): Observable<number> {\n  //   const url = `${this.apiUrl}/currency-converter`;\n  //   return this.http.post<number>(url, conversionCurrency);\n  // }\n  \n  // getAllCurrencies(): Observable<Currency[]> {\n  //   const url = `${this.apiUrl}/currencies`;\n  //   return this.http.get<Currency[]>(url);\n  // }\n  \n  promoteProduct(id: number, pourcentage: number): Observable<void> {\n    const url = `${this.apiUrl}/promotion/${id}/${pourcentage}`;\n    return this.http.put<void>(url, null);\n  }\n  \n  getClientLocation(): Observable<{country: string, city: string}> {\n    const url = `${this.apiUrl}/client-location`;\n    return this.http.get<{country: string, city: string}>(url);\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}